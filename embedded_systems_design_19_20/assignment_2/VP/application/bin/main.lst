ca65 V2.17 - Git N/A
Main file   : src/main.s
Current file: src/main.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_mul
000000r 1               	.import		_io_write
000000r 1               	.import		_io_read
000000r 1               	.import		_mul754_v
000000r 1               	.import		_mul754_vhd
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ test_multiplier754_v (unsigned long, unsigned long, __near__ unsigned long *)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_test_multiplier754_v: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  20 rr rr     	jsr     pushw0sp
000006r 1  A0 0B        	ldy     #$0B
000008r 1  20 rr rr     	jsr     ldeaxysp
00000Br 1  20 rr rr     	jsr     pusheax
00000Er 1  A0 0B        	ldy     #$0B
000010r 1  20 rr rr     	jsr     ldeaxysp
000013r 1  20 rr rr     	jsr     _mul754_v
000016r 1  A0 00        	ldy     #$00
000018r 1  20 rr rr     	jsr     steaxspidx
00001Br 1  A0 0A        	ldy     #$0A
00001Dr 1  4C rr rr     	jmp     addysp
000020r 1               
000020r 1               .endproc
000020r 1               
000020r 1               ; ---------------------------------------------------------------
000020r 1               ; void __near__ test_multiplier754_vhd (unsigned long, unsigned long, __near__ unsigned long *)
000020r 1               ; ---------------------------------------------------------------
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1               .proc	_test_multiplier754_vhd: near
000020r 1               
000020r 1               .segment	"CODE"
000020r 1               
000020r 1  20 rr rr     	jsr     pushax
000023r 1  20 rr rr     	jsr     pushw0sp
000026r 1  A0 0B        	ldy     #$0B
000028r 1  20 rr rr     	jsr     ldeaxysp
00002Br 1  20 rr rr     	jsr     pusheax
00002Er 1  A0 0B        	ldy     #$0B
000030r 1  20 rr rr     	jsr     ldeaxysp
000033r 1  20 rr rr     	jsr     _mul754_vhd
000036r 1  A0 00        	ldy     #$00
000038r 1  20 rr rr     	jsr     steaxspidx
00003Br 1  A0 0A        	ldy     #$0A
00003Dr 1  4C rr rr     	jmp     addysp
000040r 1               
000040r 1               .endproc
000040r 1               
000040r 1               ; ---------------------------------------------------------------
000040r 1               ; int __near__ main (void)
000040r 1               ; ---------------------------------------------------------------
000040r 1               
000040r 1               .segment	"CODE"
000040r 1               
000040r 1               .proc	_main: near
000040r 1               
000040r 1               .segment	"CODE"
000040r 1               
000040r 1  A2 00        	ldx     #$00
000042r 1  86 rr        	stx     sreg
000044r 1  A9 40        	lda     #$40
000046r 1  85 rr        	sta     sreg+1
000048r 1  8A           	txa
000049r 1  20 rr rr     	jsr     pusheax
00004Cr 1  A9 3F        	lda     #$3F
00004Er 1  85 rr        	sta     sreg+1
000050r 1  8A           	txa
000051r 1  20 rr rr     	jsr     pusheax
000054r 1  A0 14        	ldy     #$14
000056r 1  20 rr rr     	jsr     subysp
000059r 1  A0 1B        	ldy     #$1B
00005Br 1  20 rr rr     	jsr     ldeaxysp
00005Er 1  A0 04        	ldy     #$04
000060r 1  20 rr rr     	jsr     steaxysp
000063r 1  A0 17        	ldy     #$17
000065r 1  20 rr rr     	jsr     ldeaxysp
000068r 1  20 rr rr     	jsr     steax0sp
00006Br 1  A5 rr        	lda     sp
00006Dr 1  A6 rr        	ldx     sp+1
00006Fr 1  18           	clc
000070r 1  69 10        	adc     #$10
000072r 1  90 01        	bcc     L0024
000074r 1  E8           	inx
000075r 1  20 rr rr     L0024:	jsr     _test_multiplier754_v
000078r 1  20 rr rr     	jsr     decsp8
00007Br 1  A0 1B        	ldy     #$1B
00007Dr 1  20 rr rr     	jsr     ldeaxysp
000080r 1  A0 04        	ldy     #$04
000082r 1  20 rr rr     	jsr     steaxysp
000085r 1  A0 17        	ldy     #$17
000087r 1  20 rr rr     	jsr     ldeaxysp
00008Ar 1  20 rr rr     	jsr     steax0sp
00008Dr 1  A5 rr        	lda     sp
00008Fr 1  A6 rr        	ldx     sp+1
000091r 1  18           	clc
000092r 1  69 0C        	adc     #$0C
000094r 1  90 01        	bcc     L0029
000096r 1  E8           	inx
000097r 1  20 rr rr     L0029:	jsr     _test_multiplier754_vhd
00009Ar 1  A0 0B        	ldy     #$0B
00009Cr 1  20 rr rr     	jsr     ldeaxysp
00009Fr 1  20 rr rr     	jsr     pusheax
0000A2r 1  A0 0B        	ldy     #$0B
0000A4r 1  20 rr rr     	jsr     ldeaxysp
0000A7r 1  20 rr rr     	jsr     toseqeax
0000AAr 1  F0 0B        	beq     L002A
0000ACr 1  A2 00        	ldx     #$00
0000AEr 1  86 rr        	stx     sreg
0000B0r 1  86 rr        	stx     sreg+1
0000B2r 1  A9 01        	lda     #$01
0000B4r 1  4C rr rr     	jmp     L0034
0000B7r 1  A2 00        L002A:	ldx     #$00
0000B9r 1  86 rr        	stx     sreg
0000BBr 1  86 rr        	stx     sreg+1
0000BDr 1  8A           	txa
0000BEr 1  20 rr rr     L0034:	jsr     _io_write
0000C1r 1  20 rr rr     	jsr     _io_read
0000C4r 1  20 rr rr     	jsr     steax0sp
0000C7r 1  A2 00        	ldx     #$00
0000C9r 1  8A           	txa
0000CAr 1  A0 14        	ldy     #$14
0000CCr 1  4C rr rr     	jmp     addysp
0000CFr 1               
0000CFr 1               .endproc
0000CFr 1               
0000CFr 1               
